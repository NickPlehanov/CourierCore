// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using CourierCore.Models;

namespace CourierCore.Data
{
    public partial class TpdoriosContext : DbContext
    {
        public TpdoriosContext()
        {
        }

        public TpdoriosContext(DbContextOptions<TpdoriosContext> options)
            : base(options)
        {
        }

        public virtual DbSet<TpCheckPayments> TpCheckPayments { get; set; }
        public virtual DbSet<TpChecks> TpChecks { get; set; }
        public virtual DbSet<TpClients> TpClients { get; set; }
        public virtual DbSet<TpGuestDeliveries> TpGuestDeliveries { get; set; }
        public virtual DbSet<TpGuests> TpGuests { get; set; }
        public virtual DbSet<TpLocations> TpLocations { get; set; }
        public virtual DbSet<TpMenuItems> TpMenuItems { get; set; }
        public virtual DbSet<TpMenuVolumeTypes> TpMenuVolumeTypes { get; set; }
        public virtual DbSet<TpOrderItems> TpOrderItems { get; set; }
        public virtual DbSet<TpOrders> TpOrders { get; set; }
        public virtual DbSet<TpPayTypes> TpPayTypes { get; set; }
        public virtual DbSet<TpPeople> TpPeople { get; set; }
        public virtual DbSet<TpPreCheckItems> TpPreCheckItems { get; set; }
        public virtual DbSet<TpPreChecks> TpPreChecks { get; set; }
        public virtual DbSet<TpUserLocationPresence> TpUserLocationPresence { get; set; }
        public virtual DbSet<TpUsers> TpUsers { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TpCheckPayments>(entity =>
            {
                entity.HasKey(e => e.ChpyId)
                    .HasName("PK_CheckPayments")
                    .IsClustered(false);

                entity.ToTable("tp_CheckPayments");

                entity.HasIndex(e => e.ChpyAtopId)
                    .HasName("CK_tp_CheckPayments_chpy_atop_ID");

                entity.HasIndex(e => e.ChpyChckId)
                    .HasName("CK_tp_CheckPayments_chpy_chck_ID")
                    .IsClustered();

                entity.HasIndex(e => e.ChpyChpcId)
                    .HasName("CK_tp_CheckPayments_chpy_chpc_ID");

                entity.HasIndex(e => e.ChpyPytpId)
                    .HasName("CK_tp_CheckPayments_chpy_pytp_ID");

                entity.Property(e => e.ChpyId)
                    .HasColumnName("chpy_ID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.ChpyAtopId).HasColumnName("chpy_atop_ID");

                entity.Property(e => e.ChpyChckId).HasColumnName("chpy_chck_ID");

                entity.Property(e => e.ChpyChpcId).HasColumnName("chpy_chpc_ID");

                entity.Property(e => e.ChpyPytpId).HasColumnName("chpy_pytp_ID");

                entity.Property(e => e.ChpySum)
                    .HasColumnName("chpy_Sum")
                    .HasColumnType("numeric(18, 4)");

                entity.HasOne(d => d.ChpyChck)
                    .WithMany(p => p.TpCheckPayments)
                    .HasForeignKey(d => d.ChpyChckId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CheckPayments_Checks");

                entity.HasOne(d => d.ChpyPytp)
                    .WithMany(p => p.TpCheckPayments)
                    .HasForeignKey(d => d.ChpyPytpId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CheckPayments_PayTypes");
            });

            modelBuilder.Entity<TpChecks>(entity =>
            {
                entity.HasKey(e => e.ChckId)
                    .HasName("PK_Checks")
                    .IsClustered(false);

                entity.ToTable("tp_Checks");

                entity.HasIndex(e => e.ChckChcktypId)
                    .HasName("CK_tp_Checks_chck_chcktyp_ID");

                entity.HasIndex(e => e.ChckChstId)
                    .HasName("CK_tp_Checks_chck_chst_ID");

                entity.HasIndex(e => e.ChckDevId)
                    .HasName("CK_tp_Checks_chck_dev_ID");

                entity.HasIndex(e => e.ChckDevIdPrinter)
                    .HasName("CK_tp_Checks_chck_dev_ID_Printer");

                entity.HasIndex(e => e.ChckDostId)
                    .HasName("CK_tp_Checks_chck_dost_ID");

                entity.HasIndex(e => e.ChckFsopId)
                    .HasName("CK_tp_Checks_chck_fsop_ID");

                entity.HasIndex(e => e.ChckPrchId)
                    .HasName("CK_tp_Checks_chck_prch_ID")
                    .IsClustered();

                entity.HasIndex(e => e.ChckUsrId)
                    .HasName("CK_tp_Checks_chck_usr_ID");

                entity.HasIndex(e => new { e.ChckId, e.ChckPrchId, e.ChckDate, e.ChckChstId })
                    .HasName("CI_tp_Checks_chck_Date");

                entity.Property(e => e.ChckId)
                    .HasColumnName("chck_ID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.ChckChange)
                    .HasColumnName("chck_Change")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.ChckChcktypId)
                    .HasColumnName("chck_chcktyp_ID")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.ChckChstId).HasColumnName("chck_chst_ID");

                entity.Property(e => e.ChckDate)
                    .HasColumnName("chck_Date")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ChckDevId).HasColumnName("chck_dev_ID");

                entity.Property(e => e.ChckDevIdPrinter).HasColumnName("chck_dev_ID_Printer");

                entity.Property(e => e.ChckDostId).HasColumnName("chck_dost_ID");

                entity.Property(e => e.ChckFsopId).HasColumnName("chck_fsop_ID");

                entity.Property(e => e.ChckName)
                    .IsRequired()
                    .HasColumnName("chck_Name");

                entity.Property(e => e.ChckPrchId).HasColumnName("chck_prch_ID");

                entity.Property(e => e.ChckUsrId).HasColumnName("chck_usr_ID");

                entity.HasOne(d => d.ChckPrch)
                    .WithMany(p => p.TpChecks)
                    .HasForeignKey(d => d.ChckPrchId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tp_Checks_tp_PreChecks");

                entity.HasOne(d => d.ChckUsr)
                    .WithMany(p => p.TpChecks)
                    .HasForeignKey(d => d.ChckUsrId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Checks_Users");
            });

            modelBuilder.Entity<TpClients>(entity =>
            {
                entity.HasKey(e => e.ClntId)
                    .HasName("PK_Clients");

                entity.ToTable("tp_Clients");

                entity.HasIndex(e => e.ClntClgrId)
                    .HasName("CK_tp_Clients_clnt_clgr_ID");

                entity.HasIndex(e => e.ClntDelId)
                    .HasName("CK_tp_Clients_clnt_del_ID");

                entity.HasIndex(e => e.ClntFirmId)
                    .HasName("CK_tp_Clients_clnt_firm_ID");

                entity.HasIndex(e => e.ClntLggrId)
                    .HasName("CK_tp_Clients_clnt_lggr_ID");

                entity.HasIndex(e => e.ClntPeplId)
                    .HasName("CK_tp_Clients_clnt_pepl_ID");

                entity.HasIndex(e => e.ClntSprvId)
                    .HasName("CK_tp_Clients_clnt_sprv_ID");

                entity.Property(e => e.ClntId)
                    .HasColumnName("clnt_ID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.ClntClgrId).HasColumnName("clnt_clgr_ID");

                entity.Property(e => e.ClntDelId).HasColumnName("clnt_del_ID");

                entity.Property(e => e.ClntDescription).HasColumnName("clnt_Description");

                entity.Property(e => e.ClntFirmId).HasColumnName("clnt_firm_ID");

                entity.Property(e => e.ClntIsDisabled).HasColumnName("clnt_IsDisabled");

                entity.Property(e => e.ClntLggrId).HasColumnName("clnt_lggr_ID");

                entity.Property(e => e.ClntName)
                    .IsRequired()
                    .HasColumnName("clnt_Name");

                entity.Property(e => e.ClntPeplId).HasColumnName("clnt_pepl_ID");

                entity.Property(e => e.ClntPhones)
                    .HasColumnName("clnt_Phones")
                    .HasColumnType("xml");

                entity.Property(e => e.ClntSprvId).HasColumnName("clnt_sprv_ID");

                entity.HasOne(d => d.ClntPepl)
                    .WithMany(p => p.TpClients)
                    .HasForeignKey(d => d.ClntPeplId)
                    .HasConstraintName("FK_Clients_Peoples");
            });

            modelBuilder.Entity<TpGuestDeliveries>(entity =>
            {
                entity.HasKey(e => e.GsdlvGestId);

                entity.ToTable("tp_GuestDeliveries");

                entity.HasIndex(e => e.GsdlvCncptId)
                    .HasName("CK_tp_GuestDeliveries_gsdlv_cncpt_ID");

                entity.HasIndex(e => e.GsdlvDate)
                    .HasName("CI_tp_GuestDeliveries_gsdlv_Date");

                entity.HasIndex(e => e.GsdlvDateDelivered)
                    .HasName("CI_tp_GuestDeliveries_gsdlv_DateDelivered");

                entity.HasIndex(e => e.GsdlvDlvrmtId)
                    .HasName("CK_tp_GuestDeliveries_gsdlv_dlvrmt_ID");

                entity.HasIndex(e => e.GsdlvDlvrstId)
                    .HasName("CK_tp_GuestDeliveries_gsdlv_dlvrst_ID");

                entity.HasIndex(e => e.GsdlvPytpIdPrepaid)
                    .HasName("CK_tp_GuestDeliveries_gsdlv_pytp_ID_Prepaid");

                entity.HasIndex(e => e.GsdlvUsrIdCourier)
                    .HasName("CK_tp_GuestDeliveries_gsdlv_usr_ID_Courier");

                entity.Property(e => e.GsdlvGestId)
                    .HasColumnName("gsdlv_gest_ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.GsdlvCashAmount)
                    .HasColumnName("gsdlv_CashAmount")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.GsdlvCncptId).HasColumnName("gsdlv_cncpt_ID");

                entity.Property(e => e.GsdlvCookingTime).HasColumnName("gsdlv_CookingTime");

                entity.Property(e => e.GsdlvDate)
                    .HasColumnName("gsdlv_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.GsdlvDateDelivered)
                    .HasColumnName("gsdlv_DateDelivered")
                    .HasColumnType("datetime");

                entity.Property(e => e.GsdlvDeliveryTime).HasColumnName("gsdlv_DeliveryTime");

                entity.Property(e => e.GsdlvDlvrmtId).HasColumnName("gsdlv_dlvrmt_ID");

                entity.Property(e => e.GsdlvDlvrstId).HasColumnName("gsdlv_dlvrst_ID");

                entity.Property(e => e.GsdlvExtraInfo).HasColumnName("gsdlv_ExtraInfo");

                entity.Property(e => e.GsdlvGeoCoordinates).HasColumnName("gsdlv_GeoCoordinates");

                entity.Property(e => e.GsdlvGeoRegionId).HasColumnName("gsdlv_GeoRegionID");

                entity.Property(e => e.GsdlvIsAutoStart).HasColumnName("gsdlv_IsAutoStart");

                entity.Property(e => e.GsdlvNeedConfirmation).HasColumnName("gsdlv_NeedConfirmation");

                entity.Property(e => e.GsdlvPayDescription).HasColumnName("gsdlv_PayDescription");

                entity.Property(e => e.GsdlvPytpIdPrepaid).HasColumnName("gsdlv_pytp_ID_Prepaid");

                entity.Property(e => e.GsdlvSendSooner).HasColumnName("gsdlv_SendSooner");

                entity.Property(e => e.GsdlvUsrIdCourier).HasColumnName("gsdlv_usr_ID_Courier");

                entity.HasOne(d => d.GsdlvGest)
                    .WithOne(p => p.TpGuestDeliveries)
                    .HasForeignKey<TpGuestDeliveries>(d => d.GsdlvGestId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tp_GuestDeliveries_tp_Guests");

                entity.HasOne(d => d.GsdlvPytpIdPrepa)
                    .WithMany(p => p.TpGuestDeliveries)
                    .HasForeignKey(d => d.GsdlvPytpIdPrepaid)
                    .HasConstraintName("FK_tp_GuestDeliveries_tp_PayTypes1");

                entity.HasOne(d => d.GsdlvUsrIdCourierNavigation)
                    .WithMany(p => p.TpGuestDeliveries)
                    .HasForeignKey(d => d.GsdlvUsrIdCourier)
                    .HasConstraintName("FK_tp_GuestDeliveries_tp_Users1");
            });

            modelBuilder.Entity<TpGuests>(entity =>
            {
                entity.HasKey(e => e.GestId)
                    .HasName("PK_Guests")
                    .IsClustered(false);

                entity.ToTable("tp_Guests");

                entity.HasIndex(e => e.GestClntId)
                    .HasName("CK_tp_Guests_gest_clnt_ID");

                entity.HasIndex(e => e.GestDateClose)
                    .HasName("CI_tp_Guests_gest_DateClose");

                entity.HasIndex(e => e.GestDevId)
                    .HasName("CK_tp_Guests_gest_dev_ID");

                entity.HasIndex(e => e.GestDevIdSalePrivilege)
                    .HasName("CK_tp_Guests_gest_dev_ID_SalePrivilege");

                entity.HasIndex(e => e.GestDvsnId)
                    .HasName("CK_tp_Guests_gest_dvsn_ID")
                    .IsClustered();

                entity.HasIndex(e => e.GestGestIdOriginal)
                    .HasName("CK_tp_Guests_gest_gest_ID_Original");

                entity.HasIndex(e => e.GestGsstId)
                    .HasName("CK_tp_Guests_gest_gsst_ID");

                entity.HasIndex(e => e.GestIdntId)
                    .HasName("CK_tp_Guests_gest_idnt_ID");

                entity.HasIndex(e => e.GestLggrId)
                    .HasName("CK_tp_Guests_gest_lggr_ID");

                entity.HasIndex(e => e.GestPlacId)
                    .HasName("CK_tp_Guests_gest_plac_ID");

                entity.HasIndex(e => e.GestSprvId)
                    .HasName("CK_tp_Guests_gest_sprv_ID");

                entity.HasIndex(e => e.GestUsrId)
                    .HasName("CK_tp_Guests_gest_usr_ID");

                entity.HasIndex(e => new { e.GestId, e.GestDvsnId, e.GestGestIdOriginal, e.GestUsrId, e.GestDateOpen })
                    .HasName("CI_tp_Guests_gest_DateOpen");

                entity.Property(e => e.GestId)
                    .HasColumnName("gest_ID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.GestClientAddress).HasColumnName("gest_ClientAddress");

                entity.Property(e => e.GestClientEmail).HasColumnName("gest_ClientEMail");

                entity.Property(e => e.GestClientName).HasColumnName("gest_ClientName");

                entity.Property(e => e.GestClientPhone).HasColumnName("gest_ClientPhone");

                entity.Property(e => e.GestClntId).HasColumnName("gest_clnt_ID");

                entity.Property(e => e.GestComment).HasColumnName("gest_Comment");

                entity.Property(e => e.GestCount).HasColumnName("gest_Count");

                entity.Property(e => e.GestDateClose)
                    .HasColumnName("gest_DateClose")
                    .HasColumnType("datetime");

                entity.Property(e => e.GestDateOpen)
                    .HasColumnName("gest_DateOpen")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.GestDevId).HasColumnName("gest_dev_ID");

                entity.Property(e => e.GestDevIdSalePrivilege).HasColumnName("gest_dev_ID_SalePrivilege");

                entity.Property(e => e.GestDvsnId).HasColumnName("gest_dvsn_ID");

                entity.Property(e => e.GestGestIdOriginal).HasColumnName("gest_gest_ID_Original");

                entity.Property(e => e.GestGsstId).HasColumnName("gest_gsst_ID");

                entity.Property(e => e.GestIdntId).HasColumnName("gest_idnt_ID");

                entity.Property(e => e.GestInformationTransactionId).HasColumnName("gest_InformationTransactionID");

                entity.Property(e => e.GestLggrId).HasColumnName("gest_lggr_ID");

                entity.Property(e => e.GestName)
                    .IsRequired()
                    .HasColumnName("gest_Name");

                entity.Property(e => e.GestPlacId).HasColumnName("gest_plac_ID");

                entity.Property(e => e.GestPlaceNumber).HasColumnName("gest_PlaceNumber");

                entity.Property(e => e.GestSalePrivilegeData).HasColumnName("gest_SalePrivilegeData");

                entity.Property(e => e.GestSprvId).HasColumnName("gest_sprv_ID");

                entity.Property(e => e.GestUsrId).HasColumnName("gest_usr_ID");

                entity.HasOne(d => d.GestUsr)
                    .WithMany(p => p.TpGuests)
                    .HasForeignKey(d => d.GestUsrId)
                    .HasConstraintName("FK_Guests_Users");
            });

            modelBuilder.Entity<TpLocations>(entity =>
            {
                entity.HasKey(e => e.LocId);

                entity.ToTable("tp_Locations");

                entity.HasIndex(e => e.LocDelId)
                    .HasName("CK_tp_Locations_loc_del_ID");

                entity.Property(e => e.LocId)
                    .HasColumnName("loc_ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.LocDelId).HasColumnName("loc_del_ID");

                entity.Property(e => e.LocDescription).HasColumnName("loc_Description");

                entity.Property(e => e.LocName)
                    .IsRequired()
                    .HasColumnName("loc_Name");
            });

            modelBuilder.Entity<TpMenuItems>(entity =>
            {
                entity.HasKey(e => e.MitmId)
                    .HasName("PK_PriceListItems");

                entity.ToTable("tp_MenuItems");

                entity.HasIndex(e => e.MitmDelId)
                    .HasName("CK_tp_MenuItems_mitm_del_ID");

                entity.HasIndex(e => e.MitmMgrpId)
                    .HasName("CK_tp_MenuItems_mitm_mgrp_ID");

                entity.HasIndex(e => e.MitmMiclId)
                    .HasName("CK_tp_MenuItems_mitm_micl_ID");

                entity.HasIndex(e => e.MitmMifsctId)
                    .HasName("CK_tp_MenuItems_mitm_mifsct_ID");

                entity.HasIndex(e => e.MitmMitmIdAncestor)
                    .HasName("CK_tp_MenuItems_mitm_mitm_ID_Ancestor");

                entity.HasIndex(e => e.MitmMmodId)
                    .HasName("CK_tp_MenuItems_mitm_mmod_ID");

                entity.HasIndex(e => e.MitmMpicId)
                    .HasName("CK_tp_MenuItems_mitm_mpic_ID");

                entity.HasIndex(e => e.MitmMsprId)
                    .HasName("CK_tp_MenuItems_mitm_mspr_ID");

                entity.HasIndex(e => e.MitmMsrvId)
                    .HasName("CK_tp_MenuItems_mitm_msrv_ID");

                entity.HasIndex(e => e.MitmMtypId)
                    .HasName("CK_tp_MenuItems_mitm_mtyp_ID");

                entity.HasIndex(e => e.MitmMvtpId)
                    .HasName("CK_tp_MenuItems_mitm_mvtp_ID");

                entity.HasIndex(e => e.MitmPbfmId)
                    .HasName("CK_tp_MenuItems_mitm_mbfm_ID");

                entity.Property(e => e.MitmId)
                    .HasColumnName("mitm_ID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.MitmArticle).HasColumnName("mitm_Article");

                entity.Property(e => e.MitmDelId).HasColumnName("mitm_del_ID");

                entity.Property(e => e.MitmDescription).HasColumnName("mitm_Description");

                entity.Property(e => e.MitmIsDisabled).HasColumnName("mitm_IsDisabled");

                entity.Property(e => e.MitmIsInheritIdentifiers).HasColumnName("mitm_IsInheritIdentifiers");

                entity.Property(e => e.MitmIsInheritTariffs).HasColumnName("mitm_IsInheritTariffs");

                entity.Property(e => e.MitmIsShortcut).HasColumnName("mitm_IsShortcut");

                entity.Property(e => e.MitmMgrpId).HasColumnName("mitm_mgrp_ID");

                entity.Property(e => e.MitmMiclId).HasColumnName("mitm_micl_ID");

                entity.Property(e => e.MitmMifsctId).HasColumnName("mitm_mifsct_ID");

                entity.Property(e => e.MitmMitmIdAncestor).HasColumnName("mitm_mitm_ID_Ancestor");

                entity.Property(e => e.MitmMmodId).HasColumnName("mitm_mmod_ID");

                entity.Property(e => e.MitmMpicId).HasColumnName("mitm_mpic_ID");

                entity.Property(e => e.MitmMsprId).HasColumnName("mitm_mspr_ID");

                entity.Property(e => e.MitmMsrvId).HasColumnName("mitm_msrv_ID");

                entity.Property(e => e.MitmMtypId).HasColumnName("mitm_mtyp_ID");

                entity.Property(e => e.MitmMvtpId).HasColumnName("mitm_mvtp_ID");

                entity.Property(e => e.MitmName).HasColumnName("mitm_Name");

                entity.Property(e => e.MitmOrder).HasColumnName("mitm_Order");

                entity.Property(e => e.MitmPbfmId).HasColumnName("mitm_pbfm_ID");

                entity.Property(e => e.MitmPhoto).HasColumnName("mitm_Photo");

                entity.Property(e => e.MitmPhotoFileName).HasColumnName("mitm_PhotoFileName");

                entity.Property(e => e.MitmPrice)
                    .HasColumnName("mitm_Price")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.MitmQuickCode).HasColumnName("mitm_QuickCode");

                entity.Property(e => e.MitmShortName).HasColumnName("mitm_ShortName");

                entity.Property(e => e.MitmVat)
                    .HasColumnName("mitm_VAT")
                    .HasColumnType("numeric(18, 3)");

                entity.Property(e => e.MitmVolume)
                    .HasColumnName("mitm_Volume")
                    .HasColumnType("numeric(18, 6)");

                entity.HasOne(d => d.MitmMvtp)
                    .WithMany(p => p.TpMenuItems)
                    .HasForeignKey(d => d.MitmMvtpId)
                    .HasConstraintName("FK_MenuItems_MenuVolumeTypes");
            });

            modelBuilder.Entity<TpMenuVolumeTypes>(entity =>
            {
                entity.HasKey(e => e.MvtpId)
                    .HasName("PK_PriceListMeasures");

                entity.ToTable("tp_MenuVolumeTypes");

                entity.HasIndex(e => e.MvtpDelId)
                    .HasName("CK_tp_MenuVolumeTypes_mvtp_del_ID");

                entity.Property(e => e.MvtpId)
                    .HasColumnName("mvtp_ID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.MvtpDelId).HasColumnName("mvtp_del_ID");

                entity.Property(e => e.MvtpDescription).HasColumnName("mvtp_Description");

                entity.Property(e => e.MvtpFormat).HasColumnName("mvtp_Format");

                entity.Property(e => e.MvtpName)
                    .IsRequired()
                    .HasColumnName("mvtp_Name");

                entity.Property(e => e.MvtpPrecision).HasColumnName("mvtp_Precision");

                entity.Property(e => e.MvtpTypeName)
                    .IsRequired()
                    .HasColumnName("mvtp_TypeName");
            });

            modelBuilder.Entity<TpOrderItems>(entity =>
            {
                entity.HasKey(e => e.OritId)
                    .HasName("PK_OrderItems")
                    .IsClustered(false);

                entity.ToTable("tp_OrderItems");

                entity.HasIndex(e => e.OritMasterId)
                    .HasName("CI_tp_OrderItems_orit_master_ID");

                entity.HasIndex(e => e.OritMitmId)
                    .HasName("CK_tp_OrderItems_orit_mitm_ID");

                entity.HasIndex(e => e.OritMmgrId)
                    .HasName("CK_tp_OrderItems_orit_mmgr_ID");

                entity.HasIndex(e => e.OritMvtpId)
                    .HasName("CK_tp_OrderItems_orit_mvtp_ID");

                entity.HasIndex(e => e.OritOrdrId)
                    .HasName("CK_tp_OrderItems_orit_ordr_ID")
                    .IsClustered();

                entity.HasIndex(e => e.OritPcitId)
                    .HasName("CK_tp_OrderItems_orit_pcit_ID");

                entity.HasIndex(e => e.OritSlgrId)
                    .HasName("CK_tp_OrderItems_orit_slgr_ID");

                entity.HasIndex(e => e.OritSprvId)
                    .HasName("CK_tp_OrderItems_orit_sprv_ID");

                entity.Property(e => e.OritId)
                    .HasColumnName("orit_ID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.OritComment).HasColumnName("orit_Comment");

                entity.Property(e => e.OritCount).HasColumnName("orit_Count");

                entity.Property(e => e.OritCourse).HasColumnName("orit_Course");

                entity.Property(e => e.OritIsUnspentCredit).HasColumnName("orit_IsUnspentCredit");

                entity.Property(e => e.OritMarkCode).HasColumnName("orit_MarkCode");

                entity.Property(e => e.OritMasterId).HasColumnName("orit_master_ID");

                entity.Property(e => e.OritMitmId).HasColumnName("orit_mitm_ID");

                entity.Property(e => e.OritMmgrId).HasColumnName("orit_mmgr_ID");

                entity.Property(e => e.OritMvtpId).HasColumnName("orit_mvtp_ID");

                entity.Property(e => e.OritOrder).HasColumnName("orit_Order");

                entity.Property(e => e.OritOrdrId).HasColumnName("orit_ordr_ID");

                entity.Property(e => e.OritPcitId).HasColumnName("orit_pcit_ID");

                entity.Property(e => e.OritPrice)
                    .HasColumnName("orit_Price")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.OritPriceDiscount)
                    .HasColumnName("orit_PriceDiscount")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.OritPriceMargin)
                    .HasColumnName("orit_PriceMargin")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.OritPriceVat)
                    .HasColumnName("orit_PriceVAT")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.OritSeatNumber).HasColumnName("orit_SeatNumber");

                entity.Property(e => e.OritSlgrId).HasColumnName("orit_slgr_ID");

                entity.Property(e => e.OritSprvId).HasColumnName("orit_sprv_ID");

                entity.Property(e => e.OritVat)
                    .HasColumnName("orit_VAT")
                    .HasColumnType("numeric(18, 3)");

                entity.Property(e => e.OritVolume)
                    .HasColumnName("orit_Volume")
                    .HasColumnType("numeric(18, 6)");

                entity.HasOne(d => d.OritMitm)
                    .WithMany(p => p.TpOrderItems)
                    .HasForeignKey(d => d.OritMitmId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrderItems_MenuItems");

                entity.HasOne(d => d.OritMvtp)
                    .WithMany(p => p.TpOrderItems)
                    .HasForeignKey(d => d.OritMvtpId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrderItems_MenuVolumeTypes");

                entity.HasOne(d => d.OritOrdr)
                    .WithMany(p => p.TpOrderItems)
                    .HasForeignKey(d => d.OritOrdrId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrderItems_Orders");
            });

            modelBuilder.Entity<TpOrders>(entity =>
            {
                entity.HasKey(e => e.OrdrId)
                    .HasName("PK_Orders")
                    .IsClustered(false);

                entity.ToTable("tp_Orders");

                entity.HasIndex(e => e.OrdrArchId)
                    .HasName("CK_tp_Orders_ordr_arch_ID");

                entity.HasIndex(e => e.OrdrDate)
                    .HasName("CI_tp_Orders_ordr_Date");

                entity.HasIndex(e => e.OrdrDevId)
                    .HasName("CK_tp_Orders_ordr_dev_ID");

                entity.HasIndex(e => e.OrdrDvsnId)
                    .HasName("CK_tp_Orders_ordr_dvsn_ID");

                entity.HasIndex(e => e.OrdrExternalTransactionId);

                entity.HasIndex(e => e.OrdrGestId)
                    .HasName("CK_tp_Orders_ordr_gest_ID")
                    .IsClustered();

                entity.HasIndex(e => e.OrdrOrstId)
                    .HasName("CK_tp_Orders_ordr_orst_ID");

                entity.HasIndex(e => e.OrdrSprvId)
                    .HasName("CK_tp_Orders_ordr_sprv_ID");

                entity.HasIndex(e => e.OrdrUsrId)
                    .HasName("CK_tp_Orders_ordr_usr_ID");

                entity.HasIndex(e => e.OrdrUsrIdOperator)
                    .HasName("CK_tp_Orders_ordr_usr_ID_Operator");

                entity.Property(e => e.OrdrId)
                    .HasColumnName("ordr_ID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.OrdrArchId).HasColumnName("ordr_arch_ID");

                entity.Property(e => e.OrdrDate)
                    .HasColumnName("ordr_Date")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OrdrDevId).HasColumnName("ordr_dev_ID");

                entity.Property(e => e.OrdrDvsnId).HasColumnName("ordr_dvsn_ID");

                entity.Property(e => e.OrdrExternalTransactionId)
                    .HasColumnName("ordr_ExternalTransactionID")
                    .HasMaxLength(128);

                entity.Property(e => e.OrdrGestId).HasColumnName("ordr_gest_ID");

                entity.Property(e => e.OrdrName)
                    .IsRequired()
                    .HasColumnName("ordr_Name");

                entity.Property(e => e.OrdrOrstId).HasColumnName("ordr_orst_ID");

                entity.Property(e => e.OrdrSprvId).HasColumnName("ordr_sprv_ID");

                entity.Property(e => e.OrdrUsrId).HasColumnName("ordr_usr_ID");

                entity.Property(e => e.OrdrUsrIdOperator).HasColumnName("ordr_usr_ID_Operator");

                entity.HasOne(d => d.OrdrGest)
                    .WithMany(p => p.TpOrders)
                    .HasForeignKey(d => d.OrdrGestId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Orders_Guests");

                entity.HasOne(d => d.OrdrUsr)
                    .WithMany(p => p.TpOrdersOrdrUsr)
                    .HasForeignKey(d => d.OrdrUsrId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Orders_Users");

                entity.HasOne(d => d.OrdrUsrIdOperatorNavigation)
                    .WithMany(p => p.TpOrdersOrdrUsrIdOperatorNavigation)
                    .HasForeignKey(d => d.OrdrUsrIdOperator)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Orders_Users1");
            });

            modelBuilder.Entity<TpPayTypes>(entity =>
            {
                entity.HasKey(e => e.PytpId)
                    .HasName("PK_PayTypes");

                entity.ToTable("tp_PayTypes");

                entity.HasIndex(e => e.PytpDelId)
                    .HasName("CK_tp_PayTypes_pytp_del_ID");

                entity.HasIndex(e => e.PytpPbfmId)
                    .HasName("CI_tp_PayTypes_pytp_pbfm_ID");

                entity.HasIndex(e => e.PytpPtgrId)
                    .HasName("CK_tp_PayTypes_pytp_ptgr_ID");

                entity.HasIndex(e => e.PytpPytcId)
                    .HasName("CK_tp_PayTypes_pytp_pytc_ID");

                entity.Property(e => e.PytpId)
                    .HasColumnName("pytp_ID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.PytpDelId).HasColumnName("pytp_del_ID");

                entity.Property(e => e.PytpDescription).HasColumnName("pytp_Description");

                entity.Property(e => e.PytpIsCash).HasColumnName("pytp_IsCash");

                entity.Property(e => e.PytpIsDisabled).HasColumnName("pytp_IsDisabled");

                entity.Property(e => e.PytpName)
                    .IsRequired()
                    .HasColumnName("pytp_Name");

                entity.Property(e => e.PytpOrder).HasColumnName("pytp_Order");

                entity.Property(e => e.PytpPbfmId).HasColumnName("pytp_pbfm_ID");

                entity.Property(e => e.PytpPicture).HasColumnName("pytp_Picture");

                entity.Property(e => e.PytpPictureFileName).HasColumnName("pytp_PictureFileName");

                entity.Property(e => e.PytpPtgrId).HasColumnName("pytp_ptgr_ID");

                entity.Property(e => e.PytpPytcId).HasColumnName("pytp_pytc_ID");

                entity.Property(e => e.PytpSmallPicture).HasColumnName("pytp_SmallPicture");
            });

            modelBuilder.Entity<TpPeople>(entity =>
            {
                entity.HasKey(e => e.PeplId)
                    .HasName("PK_Peoples");

                entity.ToTable("tp_People");

                entity.HasIndex(e => e.PeplDateBirthday)
                    .HasName("CI_tp_People_pepl_DateBirthday");

                entity.HasIndex(e => e.PeplDelId)
                    .HasName("CK_tp_People_pepl_del_ID");

                entity.HasIndex(e => e.PeplLggrId)
                    .HasName("CK_tp_People_pepl_lggr_ID");

                entity.HasIndex(e => e.PeplPpgrId)
                    .HasName("CK_tp_People_pepl_ppgr_ID");

                entity.HasIndex(e => e.PeplSexId)
                    .HasName("CK_tp_People_pepl_sex_ID");

                entity.Property(e => e.PeplId)
                    .HasColumnName("pepl_ID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.PeplComment).HasColumnName("pepl_Comment");

                entity.Property(e => e.PeplDateBirthday)
                    .HasColumnName("pepl_DateBirthday")
                    .HasColumnType("datetime");

                entity.Property(e => e.PeplDelId).HasColumnName("pepl_del_ID");

                entity.Property(e => e.PeplDocument).HasColumnName("pepl_Document");

                entity.Property(e => e.PeplEmail).HasColumnName("pepl_EMail");

                entity.Property(e => e.PeplFirstName).HasColumnName("pepl_FirstName");

                entity.Property(e => e.PeplInn).HasColumnName("pepl_INN");

                entity.Property(e => e.PeplLggrId).HasColumnName("pepl_lggr_ID");

                entity.Property(e => e.PeplPatronymic).HasColumnName("pepl_Patronymic");

                entity.Property(e => e.PeplPhoneCell).HasColumnName("pepl_PhoneCell");

                entity.Property(e => e.PeplPhoneHome).HasColumnName("pepl_PhoneHome");

                entity.Property(e => e.PeplPhoneWork).HasColumnName("pepl_PhoneWork");

                entity.Property(e => e.PeplPhoto).HasColumnName("pepl_Photo");

                entity.Property(e => e.PeplPhotoFileName).HasColumnName("pepl_PhotoFileName");

                entity.Property(e => e.PeplPosition).HasColumnName("pepl_Position");

                entity.Property(e => e.PeplPpgrId).HasColumnName("pepl_ppgr_ID");

                entity.Property(e => e.PeplSecondName).HasColumnName("pepl_SecondName");

                entity.Property(e => e.PeplSexId).HasColumnName("pepl_sex_ID");

                entity.Property(e => e.PeplWorkplace).HasColumnName("pepl_Workplace");
            });

            modelBuilder.Entity<TpPreCheckItems>(entity =>
            {
                entity.HasKey(e => e.PcitId)
                    .HasName("PK_PreCheckItems")
                    .IsClustered(false);

                entity.ToTable("tp_PreCheckItems");

                entity.HasIndex(e => e.PcitMitmId)
                    .HasName("CK_tp_PreCheckItems_pcit_mitm_ID");

                entity.HasIndex(e => e.PcitMvtpId)
                    .HasName("CK_tp_PreCheckItems_pcit_mvtp_ID");

                entity.HasIndex(e => e.PcitPcitIdMaster)
                    .HasName("CI_tp_PreCheckItems_pcit_pcit_ID_master");

                entity.HasIndex(e => e.PcitPrchId)
                    .HasName("CK_tp_PreCheckItems_pcit_prch_ID")
                    .IsClustered();

                entity.HasIndex(e => e.PcitSlgrId)
                    .HasName("CK_tp_PreCheckItems_pcit_slgr_ID");

                entity.Property(e => e.PcitId)
                    .HasColumnName("pcit_ID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.PcitComment).HasColumnName("pcit_Comment");

                entity.Property(e => e.PcitCount).HasColumnName("pcit_Count");

                entity.Property(e => e.PcitIsHidden).HasColumnName("pcit_IsHidden");

                entity.Property(e => e.PcitMarkCode).HasColumnName("pcit_MarkCode");

                entity.Property(e => e.PcitMitmId).HasColumnName("pcit_mitm_ID");

                entity.Property(e => e.PcitMvtpId).HasColumnName("pcit_mvtp_ID");

                entity.Property(e => e.PcitOrder).HasColumnName("pcit_Order");

                entity.Property(e => e.PcitPcitIdMaster).HasColumnName("pcit_pcit_ID_master");

                entity.Property(e => e.PcitPrchId).HasColumnName("pcit_prch_ID");

                entity.Property(e => e.PcitPrice)
                    .HasColumnName("pcit_Price")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.PcitPriceDiscount)
                    .HasColumnName("pcit_PriceDiscount")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.PcitPriceMargin)
                    .HasColumnName("pcit_PriceMargin")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.PcitPriceVat)
                    .HasColumnName("pcit_PriceVAT")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.PcitSlgrId).HasColumnName("pcit_slgr_ID");

                entity.Property(e => e.PcitVat)
                    .HasColumnName("pcit_VAT")
                    .HasColumnType("numeric(18, 3)");

                entity.Property(e => e.PcitVolume)
                    .HasColumnName("pcit_Volume")
                    .HasColumnType("numeric(18, 6)")
                    .HasDefaultValueSql("((1))");

                entity.HasOne(d => d.PcitMitm)
                    .WithMany(p => p.TpPreCheckItems)
                    .HasForeignKey(d => d.PcitMitmId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PreCheckItems_MenuItems");

                entity.HasOne(d => d.PcitMvtp)
                    .WithMany(p => p.TpPreCheckItems)
                    .HasForeignKey(d => d.PcitMvtpId)
                    .HasConstraintName("FK_PreCheckItems_MenuVolumeTypes");

                entity.HasOne(d => d.PcitPcitIdMasterNavigation)
                    .WithMany(p => p.InversePcitPcitIdMasterNavigation)
                    .HasForeignKey(d => d.PcitPcitIdMaster)
                    .HasConstraintName("FK_tp_PreCheckItems_tp_PreCheckItems");

                entity.HasOne(d => d.PcitPrch)
                    .WithMany(p => p.TpPreCheckItems)
                    .HasForeignKey(d => d.PcitPrchId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PreCheckItems_PreChecks");
            });

            modelBuilder.Entity<TpPreChecks>(entity =>
            {
                entity.HasKey(e => e.PrchId)
                    .HasName("PK_PreChecks");

                entity.ToTable("tp_PreChecks");

                entity.HasIndex(e => e.PrchDate)
                    .HasName("CI_tp_PreChecks_prch_Date");

                entity.HasIndex(e => e.PrchDevId)
                    .HasName("CK_tp_PreChecks_prch_dev_ID");

                entity.HasIndex(e => e.PrchDvsnId)
                    .HasName("CK_tp_PreChecks_prch_dvsn_ID");

                entity.HasIndex(e => e.PrchPcstId)
                    .HasName("CK_tp_PreChecks_prch_pcst_ID");

                entity.HasIndex(e => e.PrchPrchtypId)
                    .HasName("CK_tp_PreChecks_prch_prchtyp_ID");

                entity.HasIndex(e => e.PrchUsrId)
                    .HasName("CK_tp_PreChecks_prch_usr_ID");

                entity.HasIndex(e => new { e.PrchArchId, e.PrchDate })
                    .HasName("IX_PreChecks_arch_ID_Date");

                entity.Property(e => e.PrchId)
                    .HasColumnName("prch_ID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.PrchArchId).HasColumnName("prch_arch_ID");

                entity.Property(e => e.PrchDate)
                    .HasColumnName("prch_Date")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.PrchDevId).HasColumnName("prch_dev_ID");

                entity.Property(e => e.PrchDvsnId).HasColumnName("prch_dvsn_ID");

                entity.Property(e => e.PrchName)
                    .IsRequired()
                    .HasColumnName("prch_Name");

                entity.Property(e => e.PrchPcstId).HasColumnName("prch_pcst_ID");

                entity.Property(e => e.PrchPrchtypId)
                    .HasColumnName("prch_prchtyp_ID")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.PrchUsrId).HasColumnName("prch_usr_ID");

                entity.HasOne(d => d.PrchUsr)
                    .WithMany(p => p.TpPreChecks)
                    .HasForeignKey(d => d.PrchUsrId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PreChecks_Users");
            });

            modelBuilder.Entity<TpUserLocationPresence>(entity =>
            {
                entity.HasKey(e => e.UslpId)
                    .IsClustered(false);

                entity.ToTable("tp_UserLocationPresence");

                entity.HasIndex(e => e.UslpDateBegin)
                    .HasName("CI_tp_UserLocationPresence_uslp_DateBegin");

                entity.HasIndex(e => e.UslpDateEnd)
                    .HasName("CI_tp_UserLocationPresence_uslp_DateEnd");

                entity.HasIndex(e => e.UslpLocId)
                    .HasName("CK_tp_UserLocationPresence_uslp_loc_ID")
                    .IsClustered();

                entity.HasIndex(e => e.UslpUsrId)
                    .HasName("CK_tp_UserLocationPresence_uslp_usr_ID");

                entity.HasIndex(e => e.UslpUsrIdBegin)
                    .HasName("CK_tp_UserLocationPresence_uslp_usr_ID_Begin");

                entity.HasIndex(e => e.UslpUsrIdEnd)
                    .HasName("CK_tp_UserLocationPresence_uslp_usr_ID_End");

                entity.Property(e => e.UslpId)
                    .HasColumnName("uslp_ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.UslpDateBegin)
                    .HasColumnName("uslp_DateBegin")
                    .HasColumnType("datetime");

                entity.Property(e => e.UslpDateEnd)
                    .HasColumnName("uslp_DateEnd")
                    .HasColumnType("datetime");

                entity.Property(e => e.UslpLocId).HasColumnName("uslp_loc_ID");

                entity.Property(e => e.UslpUsrId).HasColumnName("uslp_usr_ID");

                entity.Property(e => e.UslpUsrIdBegin).HasColumnName("uslp_usr_ID_Begin");

                entity.Property(e => e.UslpUsrIdEnd).HasColumnName("uslp_usr_ID_End");

                entity.HasOne(d => d.UslpLoc)
                    .WithMany(p => p.TpUserLocationPresence)
                    .HasForeignKey(d => d.UslpLocId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tp_UserLocationPresence_tp_Locations");

                entity.HasOne(d => d.UslpUsr)
                    .WithMany(p => p.TpUserLocationPresenceUslpUsr)
                    .HasForeignKey(d => d.UslpUsrId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tp_UserLocationPresence_tp_Users");

                entity.HasOne(d => d.UslpUsrIdBeginNavigation)
                    .WithMany(p => p.TpUserLocationPresenceUslpUsrIdBeginNavigation)
                    .HasForeignKey(d => d.UslpUsrIdBegin)
                    .HasConstraintName("FK_tp_UserLocationPresence_tp_Users1");

                entity.HasOne(d => d.UslpUsrIdEndNavigation)
                    .WithMany(p => p.TpUserLocationPresenceUslpUsrIdEndNavigation)
                    .HasForeignKey(d => d.UslpUsrIdEnd)
                    .HasConstraintName("FK_tp_UserLocationPresence_tp_Users2");
            });

            modelBuilder.Entity<TpUsers>(entity =>
            {
                entity.HasKey(e => e.UsrId)
                    .HasName("PK_Users");

                entity.ToTable("tp_Users");

                entity.HasIndex(e => e.UsrDelId)
                    .HasName("CK_tp_Users_usr_del_ID");

                entity.HasIndex(e => e.UsrLggrId)
                    .HasName("CK_tp_Users_usr_lggr_ID");

                entity.HasIndex(e => e.UsrPeplId)
                    .HasName("CK_tp_Users_usr_pepl_ID");

                entity.HasIndex(e => e.UsrUsrrId)
                    .HasName("CK_tp_Users_usr_usrr_ID");

                entity.Property(e => e.UsrId)
                    .HasColumnName("usr_ID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.UsrDelId).HasColumnName("usr_del_ID");

                entity.Property(e => e.UsrDescription).HasColumnName("usr_Description");

                entity.Property(e => e.UsrDocumentNameSignature).HasColumnName("usr_DocumentNameSignature");

                entity.Property(e => e.UsrIsDisabled).HasColumnName("usr_IsDisabled");

                entity.Property(e => e.UsrIsPortalLogin).HasColumnName("usr_IsPortalLogin");

                entity.Property(e => e.UsrLggrId).HasColumnName("usr_lggr_ID");

                entity.Property(e => e.UsrLogin).HasColumnName("usr_Login");

                entity.Property(e => e.UsrName)
                    .IsRequired()
                    .HasColumnName("usr_Name");

                entity.Property(e => e.UsrPassword).HasColumnName("usr_Password");

                entity.Property(e => e.UsrPeplId).HasColumnName("usr_pepl_ID");

                entity.Property(e => e.UsrQuickCode).HasColumnName("usr_QuickCode");

                entity.Property(e => e.UsrSimpleLogonEnabled).HasColumnName("usr_SimpleLogonEnabled");

                entity.Property(e => e.UsrUsrrId).HasColumnName("usr_usrr_ID");

                entity.HasOne(d => d.UsrPepl)
                    .WithMany(p => p.TpUsers)
                    .HasForeignKey(d => d.UsrPeplId)
                    .HasConstraintName("FK_Users_Peoples");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}